public int ways(int[][] arr, int i, int j, int[][] dp){
        int m = arr.length;
        int n = arr[0].length;
        if(i==m-1 && j==n-1 && arr[i][j]!=1){
            dp[i][j] = 1;
            return dp[i][j];
        }
        if(i>=m || j>=n) return dp[i][j] = 0;
        if(arr[i][j]==1) return dp[i][j] = 0;
        if(dp[i][j]!=-1){
            return dp[i][j];
        }
        
        return dp[i][j] = ways(arr, i+1, j, dp) + ways(arr, i, j+1, dp);
    }
    public int uniquePathsWithObstacles(int[][] obstacleGrid) {
        int m = obstacleGrid.length;
        int n = obstacleGrid[0].length;
        int[][] dp = new int[m+1][n+1];
        for(int i=0; i<=m; i++){
            Arrays.fill(dp[i], -1);
        }
        int i=0;
        int j=0;
        return ways(obstacleGrid, i, j, dp);
    }
