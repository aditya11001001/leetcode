class Solution {
    public List<List<String>> addRes(List<List<String>> res, char[][] board){
        int n = board.length;
        String str = "";
        List<String> list = new ArrayList<>();
        for(int i=0; i<n; i++){
            str = "";
            for(int j=0; j<n; j++){
                str += board[i][j];
            }
            list.add(str);
        }
        res.add(list);
        return res;
    }
    public boolean isSafe(int row, int col, char[][] board, int[] rightDig, int[] leftDig, int[] left){
        int n = board.length;
        if(left[row] == 1) return false;
        if(rightDig[row+col] == 1) return false;
        if(leftDig[n-1+col-row] == 1) return false;
        return true;
    }
    public List<List<String>> putQueen(char[][] board, int col, List<List<String>> res, int[] rightDig, int[] leftDig, int[] left){
        int n = board.length;
        if(col>=n){
            addRes(res, board);
            return res;
        }

        for(int row=0; row<n; row++){
            if(isSafe(row, col, board, rightDig, leftDig, left)){
                board[row][col] = 'Q';
                left[row] = 1;
                rightDig[row+col] = 1;
                leftDig[n-1+col-row] = 1;
                putQueen(board, col+1, res, rightDig, leftDig, left);
                board[row][col] = '.';
                left[row] = 0;
                rightDig[row+col] = 0;
                leftDig[n-1+col-row] = 0;
            }
        }
        return res;
    }
    public List<List<String>> solveNQueens(int n) {
        char[][] board = new char[n][n];
        List<List<String>> res = new ArrayList<>();
        int[] rightDig = new int[2*n-1];
        int[] leftDig = new int[2*n-1];
        int[] left = new int[n];
        for(int i=0; i<n; i++){
            for(int j=0; j<n; j++){
                board[i][j] = '.';
            }
        }
        return putQueen(board, 0, res, rightDig, leftDig, left);
    }
}
