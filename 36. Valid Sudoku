class Solution {
    public boolean checkRow(char val, int rowIdx, int colIdx, char[][] board){
        for(int col=0; col<board.length; col++){
            if(col!=colIdx && board[rowIdx][col]==val){
                return false;
            }
        }
        return true;
    }
    public boolean checkCol(char val, int rowIdx, int colIdx, char[][] board){
        for(int row=0; row<board.length; row++){
            if(row!=rowIdx && board[row][colIdx]==val){
                return false;
            }
        }
        return true;
    }
    public boolean checkBox(char val, int rowIdx, int colIdx, char[][] board){
        int startRow = rowIdx - (rowIdx % 3);
        int startCol = colIdx - (colIdx % 3);
        for(int i=startRow; i<startRow + 3; i++){
            for(int j=startCol; j<startCol + 3; j++){
                if(i!=rowIdx && j!=colIdx){
                    if(board[i][j]==val){
                        return false;
                    }
                }
            } 
        }
        return true;
    }
    public boolean isValidSudoku(char[][] board) {
        boolean rowFlag = true;
        boolean colFlag = true;
        boolean boxFlag = true;
        for(int i=0; i<board.length; i++){
            for(int j=0; j<board.length; j++){
                if(board[i][j]!='.'){
                    rowFlag = checkRow(board[i][j], i, j, board);
                    colFlag = checkCol(board[i][j], i, j, board);
                    boxFlag = checkBox(board[i][j], i, j, board);
                    if(rowFlag==false || colFlag==false || boxFlag==false) return false;
                }
            } 
        }
        return true;
    }
}
